{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { database } from \"../services/firebase\";\nimport { useAuth } from \"./useAuth\";\nexport function useRoom(roomId) {\n  _s();\n\n  const {\n    user\n  } = useAuth();\n  const [questions, setQuestions] = useState([]);\n  const [title, setTitle] = useState('');\n  useEffect(() => {\n    const roomRef = database.ref(`rooms/${roomId}`);\n    roomRef.on('value', room => {\n      const databaseRoom = room.val();\n      const firebaseQuestions = databaseRoom.questions;\n      const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\n        var _value$likes, _Object$entries$find, _value$likes2;\n\n        return {\n          id: key,\n          content: value.content,\n          author: value.author,\n          isHighlighted: value.isHighlighted,\n          isAnswered: value.isAnswered,\n          likeCount: Object.values((_value$likes = value.likes) !== null && _value$likes !== void 0 ? _value$likes : {}).length,\n          likedId: (_Object$entries$find = Object.entries((_value$likes2 = value.likes) !== null && _value$likes2 !== void 0 ? _value$likes2 : {}).find(([key, like]) => like.authorId === (user === null || user === void 0 ? void 0 : user.id))) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0]\n        };\n      });\n      setTitle(databaseRoom.title);\n      setQuestions(parsedQuestions);\n    });\n    return () => {\n      roomRef.off('value');\n    };\n  }, [roomId, user === null || user === void 0 ? void 0 : user.id]);\n  return {\n    questions,\n    title\n  };\n}\n\n_s(useRoom, \"mgxgvybUx5+R+ZEDen/T7kCSRls=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"sources":["/home/jefferson/√Årea de Trabalho/estudos/letmeask/src/hooks/useRoom.ts"],"names":["useEffect","useState","database","useAuth","useRoom","roomId","user","questions","setQuestions","title","setTitle","roomRef","ref","on","room","databaseRoom","val","firebaseQuestions","parsedQuestions","Object","entries","map","key","value","id","content","author","isHighlighted","isAnswered","likeCount","values","likes","length","likedId","find","like","authorId","off"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,OAAT,QAAwB,WAAxB;AA4BA,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAiC;AAAA;;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAWH,OAAO,EAAxB;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAiB,EAAjB,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,OAAO,GAAGT,QAAQ,CAACU,GAAT,CAAc,SAAQP,MAAO,EAA7B,CAAhB;AAGAM,IAAAA,OAAO,CAACE,EAAR,CAAW,OAAX,EAAoBC,IAAI,IAAI;AACxB,YAAMC,YAAY,GAAGD,IAAI,CAACE,GAAL,EAArB;AACA,YAAMC,iBAAoC,GAAGF,YAAY,CAACR,SAA1D;AAEA,YAAMW,eAAe,GAAGC,MAAM,CAACC,OAAP,CAAeH,iBAAf,EAAkCI,GAAlC,CAAsC,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAAA;;AAC5E,eAAO;AACHC,UAAAA,EAAE,EAAEF,GADD;AAEHG,UAAAA,OAAO,EAAEF,KAAK,CAACE,OAFZ;AAGHC,UAAAA,MAAM,EAAEH,KAAK,CAACG,MAHX;AAIHC,UAAAA,aAAa,EAAEJ,KAAK,CAACI,aAJlB;AAKHC,UAAAA,UAAU,EAAEL,KAAK,CAACK,UALf;AAMHC,UAAAA,SAAS,EAAEV,MAAM,CAACW,MAAP,iBAAcP,KAAK,CAACQ,KAApB,uDAA6B,EAA7B,EAAiCC,MANzC;AAOHC,UAAAA,OAAO,0BAAEd,MAAM,CAACC,OAAP,kBAAeG,KAAK,CAACQ,KAArB,yDAA8B,EAA9B,EAAkCG,IAAlC,CAAuC,CAAC,CAACZ,GAAD,EAAMa,IAAN,CAAD,KAAiBA,IAAI,CAACC,QAAL,MAAkB9B,IAAlB,aAAkBA,IAAlB,uBAAkBA,IAAI,CAAEkB,EAAxB,CAAxD,CAAF,yDAAE,qBAAsF,CAAtF;AAPN,SAAP;AASH,OAVuB,CAAxB;AAYAd,MAAAA,QAAQ,CAACK,YAAY,CAACN,KAAd,CAAR;AACAD,MAAAA,YAAY,CAACU,eAAD,CAAZ;AACH,KAlBD;AAoBA,WAAO,MAAM;AACTP,MAAAA,OAAO,CAAC0B,GAAR,CAAY,OAAZ;AACH,KAFD;AAGH,GA3BQ,EA2BN,CAAChC,MAAD,EAASC,IAAT,aAASA,IAAT,uBAASA,IAAI,CAAEkB,EAAf,CA3BM,CAAT;AA6BA,SAAO;AAAEjB,IAAAA,SAAF;AAAaE,IAAAA;AAAb,GAAP;AACH;;GAnCeL,O;UACKD,O","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { database } from \"../services/firebase\";\nimport { useAuth } from \"./useAuth\";\n\ntype FirebaseQuestions = Record<string, {\n    author: {\n        name: string,\n        avatar: string;\n    }\n    content: string;\n    isAnswered: boolean;\n    isHighlighted: boolean;\n    likes: Record<string, {\n        authorId: string;\n    }>\n}>\n\ntype QuestionType = {\n    id: string;\n    author: {\n        name: string,\n        avatar: string;\n    }\n    content: string;\n    isAnswered: boolean;\n    isHighlighted: boolean;\n    likeCount: number;\n    hasLiked: boolean;\n}\n\nexport function useRoom(roomId: string) {\n    const { user } = useAuth();\n    const [questions, setQuestions] = useState<QuestionType[]>([]);\n    const [title, setTitle] = useState('');\n\n    useEffect(() => {\n        const roomRef = database.ref(`rooms/${roomId}`);\n\n\n        roomRef.on('value', room => {\n            const databaseRoom = room.val();\n            const firebaseQuestions: FirebaseQuestions = databaseRoom.questions;\n\n            const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\n                return {\n                    id: key,\n                    content: value.content,\n                    author: value.author,\n                    isHighlighted: value.isHighlighted,\n                    isAnswered: value.isAnswered,\n                    likeCount: Object.values(value.likes ?? {}).length,\n                    likedId: Object.entries(value.likes ?? {}).find(([key, like]) => like.authorId === user?.id)?.[0]\n                }\n            })\n\n            setTitle(databaseRoom.title);\n            setQuestions(parsedQuestions);\n        })        \n\n        return () => {\n            roomRef.off('value');\n        }\n    }, [roomId, user?.id]);\n\n    return { questions, title }\n}"]},"metadata":{},"sourceType":"module"}