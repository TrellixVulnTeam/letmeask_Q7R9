{"ast":null,"code":"var _jsxFileName = \"/home/jefferson/\\xC1rea de Trabalho/estudos/letmeask/src/pages/Room.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport logoImg from \"../assets/images/logo.svg\";\nimport { Button } from '../components/Button';\nimport { RoomCode } from '../components/RoomCode';\nimport { useAuth } from '../hooks/useAuth';\nimport { database } from '../services/firebase';\nimport '../styles/room.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Room() {\n  _s();\n\n  const {\n    user\n  } = useAuth();\n  const params = useParams();\n  const [newQuestion, setNewQuestion] = useState('');\n  const roomId = params.id;\n  useEffect(() => {\n    const roomRef = database.ref(`rooms/${roomId}`);\n    roomRef.once('value', room => {\n      const databaseRoom = room.val();\n      const firebaseQuestions = databaseRoom.questions;\n      const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\n        return {\n          id: key,\n          content: value.content,\n          author: value.author,\n          isHighlighted: value.isHighlighted,\n          isAnswered: value.isAnswered\n        };\n      });\n    });\n  }, [roomId]);\n\n  async function handleSendQuestion(event) {\n    event.preventDefault();\n\n    if (newQuestion.trim() === '') {\n      return;\n    }\n\n    if (!user) {\n      throw new Error(\"You must be logged in\");\n    }\n\n    const question = {\n      content: newQuestion,\n      author: {\n        name: user.name,\n        avatar: user.avatar\n      },\n      isHighlighted: false,\n      isAnswered: false\n    };\n    await database.ref(`rooms/${roomId}/questions`).push(question);\n    setNewQuestion('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImg,\n          alt: \"Letmeask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(RoomCode, {\n          code: roomId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Sala React\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"4 perguntas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSendQuestion,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"O que voc\\xEA quer perguntar?\",\n          onChange: event => setNewQuestion(event.target.value),\n          value: newQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-footer\",\n          children: [user ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: user.avatar,\n              alt: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Para enviar uma pergunta, \", /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"fa\\xE7a seu login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 61\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            disabled: !user,\n            children: \"Enviar pergunta\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Room, \"/Cy9JTrx4j3AAi323Vd92LDGD9Y=\", false, function () {\n  return [useAuth, useParams];\n});\n\n_c = Room;\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["/home/jefferson/√Årea de Trabalho/estudos/letmeask/src/pages/Room.tsx"],"names":["useEffect","useState","useParams","Button","RoomCode","useAuth","database","Room","user","params","newQuestion","setNewQuestion","roomId","id","roomRef","ref","once","room","databaseRoom","val","firebaseQuestions","questions","parsedQuestions","Object","entries","map","key","value","content","author","isHighlighted","isAnswered","handleSendQuestion","event","preventDefault","trim","Error","question","name","avatar","push","logoImg","target"],"mappings":"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","sourcesContent":["import { FormEvent, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport logoImg from '../assets/images/logo.svg';\n\nimport { Button } from '../components/Button';\nimport { RoomCode } from '../components/RoomCode';\n\nimport { useAuth } from '../hooks/useAuth';\n\nimport { database } from '../services/firebase';\n\nimport '../styles/room.scss';\n\ntype FirebaseQuestions = Record<string, {\n    author: {\n        name: string,\n        avatar: string;\n    }\n    content: string;\n    isAnswered: boolean;\n    isHighlighted: boolean;\n}>\n\ntype RoomParams = {\n    id: string;\n}\n\nexport function Room() {\n    const { user } = useAuth();\n    const params = useParams<RoomParams>();\n    const [newQuestion, setNewQuestion] = useState('');\n\n    const roomId = params.id; \n\n    useEffect(() => {\n        const roomRef = database.ref(`rooms/${roomId}`);\n\n\n        roomRef.once('value', room => {\n            const databaseRoom = room.val();\n            const firebaseQuestions: FirebaseQuestions = databaseRoom.questions;\n\n            const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\n                return {\n                    id: key,\n                    content: value.content,\n                    author: value.author,\n                    isHighlighted: value.isHighlighted,\n                    isAnswered: value.isAnswered,\n                }\n            })\n        })        \n    }, [roomId]);\n\n    async function handleSendQuestion(event: FormEvent) {\n        event.preventDefault();\n\n        if (newQuestion.trim() === '') {\n            return;\n        }\n\n        if (!user) {\n            throw new Error(\"You must be logged in\");\n        }\n\n        const question = {\n            content: newQuestion,\n            author: {\n                name: user.name,\n                avatar: user.avatar,\n            },\n            isHighlighted: false,\n            isAnswered: false\n        };\n\n        await database.ref(`rooms/${roomId}/questions`).push(question);\n\n        setNewQuestion('');\n    }\n\n    return (\n        <div id=\"page-room\">\n            <header>\n                <div className=\"content\">\n                    <img src={logoImg} alt=\"Letmeask\" />\n                    <RoomCode code={roomId}/>\n                </div>\n            </header>\n\n            <main>\n                <div className=\"room-title\">\n                    <h1>Sala React</h1>\n                    <span>4 perguntas</span>\n                </div>\n            \n                <form onSubmit={handleSendQuestion}>\n                    <textarea \n                        placeholder=\"O que voc√™ quer perguntar?\"\n                        onChange={event => setNewQuestion(event.target.value)}\n                        value={newQuestion}\n                    />\n\n                    <div className=\"form-footer\">\n                        { user ? (\n                            <div className=\"user-info\">\n                                <img src={user.avatar} alt={user.name} />\n                                <span>{user.name}</span>\n                            </div>\n                        ) : (\n                            <span>Para enviar uma pergunta, <button>fa√ßa seu login</button>.</span>\n                        )}\n                        <Button type=\"submit\" disabled={!user}>Enviar pergunta</Button>\n                    </div>\n                </form>\n            </main>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}