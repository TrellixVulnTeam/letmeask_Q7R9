{"ast":null,"code":"var _jsxFileName = \"/home/jefferson/\\xC1rea de Trabalho/estudos/letmeask/src/pages/AdminRoom.tsx\",\n    _s = $RefreshSig$();\n\nimport { useHistory, useParams } from 'react-router-dom';\nimport logoImg from \"../assets/images/logo.svg\";\nimport deleteImg from \"../assets/images/delete.svg\";\nimport checkImg from \"../assets/images/check.svg\";\nimport answerImg from \"../assets/images/answer.svg\";\nimport { Button } from '../components/Button';\nimport { Question } from '../components/Question';\nimport { RoomCode } from '../components/RoomCode'; // import { useAuth } from '../hooks/useAuth';\n\nimport { useRoom } from '../hooks/useRoom';\nimport { database } from '../services/firebase';\nimport '../styles/room.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function AdminRoom() {\n  _s();\n\n  // const { user } = useAuth();\n  const history = useHistory();\n  const params = useParams();\n  const roomId = params.id;\n  const {\n    title,\n    questions\n  } = useRoom(roomId);\n\n  async function handleEndRoom() {\n    await database.ref(`rooms/${roomId}`).update({\n      endedAt: new Date()\n    });\n    history.push('/');\n  }\n\n  async function handleDeleteQuestion(questionId) {\n    if (window.confirm('Tem certeza que você deseja excluir esta pergunta?')) {\n      await database.ref(`rooms/${roomId}/questions/${questionId}`).remove();\n    }\n  }\n\n  async function handleCheckQuestionAnswered(questionId) {\n    await database.ref(`rooms/${roomId}/questions/${questionId}`).update({\n      isAnswered: true\n    });\n  }\n\n  async function handleHighLightQuestion(questionId) {\n    await database.ref(`rooms/${roomId}/questions/${questionId}`).update({\n      isHighlighted: true\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImg,\n          alt: \"Letmeask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(RoomCode, {\n            code: roomId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            isOutlined: true,\n            onClick: handleEndRoom,\n            children: \"Encerrar sala\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Sala \", title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [questions.length, \" pergunta(s)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-list\",\n        children: questions.map(question => {\n          return /*#__PURE__*/_jsxDEV(Question, {\n            content: question.content,\n            author: question.author,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => handleCheckQuestionAnswered(question.id),\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: checkImg,\n                alt: \"Marcar pergunta como respondida\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => handleHighLightQuestion(question.id),\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: answerImg,\n                alt: \"Dar destaque \\xE0 pergunta\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => handleDeleteQuestion(question.id),\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: deleteImg,\n                alt: \"Remover pergunta\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, this)]\n          }, question.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AdminRoom, \"jzegP1eYD/Dzuxb8KiHa++znXtE=\", false, function () {\n  return [useHistory, useParams, useRoom];\n});\n\n_c = AdminRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminRoom\");","map":{"version":3,"sources":["/home/jefferson/Área de Trabalho/estudos/letmeask/src/pages/AdminRoom.tsx"],"names":["useHistory","useParams","Button","Question","RoomCode","useRoom","database","AdminRoom","history","params","roomId","id","title","questions","handleEndRoom","ref","update","endedAt","Date","push","handleDeleteQuestion","questionId","window","confirm","remove","handleCheckQuestionAnswered","isAnswered","handleHighLightQuestion","isHighlighted","logoImg","length","map","question","content","author","checkImg","answerImg","deleteImg"],"mappings":"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","sourcesContent":["import { useHistory, useParams } from 'react-router-dom'\n\nimport logoImg from '../assets/images/logo.svg';\nimport deleteImg from '../assets/images/delete.svg';\nimport checkImg from '../assets/images/check.svg';\nimport answerImg from '../assets/images/answer.svg';\n\nimport { Button } from '../components/Button';\nimport { Question } from '../components/Question';\nimport { RoomCode } from '../components/RoomCode';\n// import { useAuth } from '../hooks/useAuth';\nimport { useRoom } from '../hooks/useRoom';\nimport { database } from '../services/firebase';\n\nimport '../styles/room.scss';\n\ntype RoomParams = {\n  id: string;\n}\n\nexport function AdminRoom() {\n  // const { user } = useAuth();\n  const history = useHistory()\n  const params = useParams<RoomParams>();\n  const roomId = params.id;\n\n  const { title, questions } = useRoom(roomId)\n\n  async function handleEndRoom() {\n    await database.ref(`rooms/${roomId}`).update({\n      endedAt: new Date(),\n    })\n\n    history.push('/');\n  }\n\n  async function handleDeleteQuestion(questionId: string) {\n    if (window.confirm('Tem certeza que você deseja excluir esta pergunta?')) {\n      await database.ref(`rooms/${roomId}/questions/${questionId}`).remove();\n    }\n  }\n\n  async function handleCheckQuestionAnswered(questionId: string) {\n    await database.ref(`rooms/${roomId}/questions/${questionId}`).update({\n      isAnswered: true,\n    });\n  }\n\n  async function handleHighLightQuestion(questionId: string) {\n    await database.ref(`rooms/${roomId}/questions/${questionId}`).update({\n      isHighlighted: true,\n    });\n  }\n\n  return (\n    <div id=\"page-room\">\n      <header>\n        <div className=\"content\">\n          <img src={logoImg} alt=\"Letmeask\" />\n          <div>\n            <RoomCode code={roomId} />\n            <Button isOutlined onClick={handleEndRoom}>Encerrar sala</Button>\n          </div>\n        </div>\n      </header>\n\n      <main>\n        <div className=\"room-title\">\n          <h1>Sala {title}</h1>\n          { questions.length > 0 && <span>{questions.length} pergunta(s)</span> }\n        </div>\n\n        <div className=\"question-list\">\n          {questions.map(question => {\n            return (\n              <Question\n                key={question.id}\n                content={question.content}\n                author={question.author}\n              >\n                <button\n                  type=\"button\"\n                  onClick={() => handleCheckQuestionAnswered(question.id)}\n                >\n                  <img src={checkImg} alt=\"Marcar pergunta como respondida\" />\n                </button>\n\n                <button\n                  type=\"button\"\n                  onClick={() => handleHighLightQuestion(question.id)}\n                >\n                  <img src={answerImg} alt=\"Dar destaque à pergunta\" />\n                </button>\n\n                <button\n                  type=\"button\"\n                  onClick={() => handleDeleteQuestion(question.id)}\n                >\n                  <img src={deleteImg} alt=\"Remover pergunta\" />\n                </button>\n              </Question>\n            );\n          })}\n        </div>\n      </main>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}