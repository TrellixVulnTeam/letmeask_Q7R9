{"ast":null,"code":"var _jsxFileName = \"/home/jefferson/\\xC1rea de Trabalho/estudos/letmeask/src/contexts/AuthContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport { auth, firebase } from '../services/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport function AuthContextProvider(props) {\n  _s();\n\n  const [user, setUser] = useState();\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = user;\n\n        if (!displayName || !photoURL) {\n          throw new Error('Missing information from Goolge Account.');\n        }\n\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  async function signInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const result = await auth.signInWithPopup(provider);\n\n    if (result.user) {\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = result.user;\n\n      if (!displayName || !photoURL) {\n        throw new Error('Missing information from Goolge Account.');\n      }\n\n      setUser({\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      signInWithGoogle\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthContextProvider, \"hT6C72rcbfRUedrDq+TPaFfRI/M=\");\n\n_c = AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/home/jefferson/Área de Trabalho/estudos/letmeask/src/contexts/AuthContext.tsx"],"names":["createContext","useEffect","useState","auth","firebase","AuthContext","AuthContextProvider","props","user","setUser","unsubscribe","onAuthStateChanged","displayName","photoURL","uid","Error","id","name","avatar","signInWithGoogle","provider","GoogleAuthProvider","result","signInWithPopup","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AAEA,SAASC,IAAT,EAAeC,QAAf,QAA+B,sBAA/B;;AAiBA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,EAAD,CAAjC;AAEP,OAAO,SAASM,mBAAT,CAA6BC,KAA7B,EAA+D;AAAA;;AAClE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,EAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,WAAW,GAAGP,IAAI,CAACQ,kBAAL,CAAwBH,IAAI,IAAI;AACpD,UAAIA,IAAJ,EAAU;AACN,cAAM;AAAEI,UAAAA,WAAF;AAAeC,UAAAA,QAAf;AAAyBC,UAAAA;AAAzB,YAAiCN,IAAvC;;AAEA,YAAI,CAACI,WAAD,IAAgB,CAACC,QAArB,EAA+B;AAC/B,gBAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACC;;AAEDN,QAAAA,OAAO,CAAC;AACRO,UAAAA,EAAE,EAAEF,GADI;AAERG,UAAAA,IAAI,EAAEL,WAFE;AAGRM,UAAAA,MAAM,EAAEL;AAHA,SAAD,CAAP;AAKH;AACA,KAdmB,CAApB;AAgBA,WAAO,MAAM;AACbH,MAAAA,WAAW;AACV,KAFD;AAGH,GApBQ,EAoBN,EApBM,CAAT;;AAsBA,iBAAeS,gBAAf,GAAkC;AAC9B,UAAMC,QAAQ,GAAG,IAAIhB,QAAQ,CAACD,IAAT,CAAckB,kBAAlB,EAAjB;AAEA,UAAMC,MAAM,GAAG,MAAMnB,IAAI,CAACoB,eAAL,CAAqBH,QAArB,CAArB;;AAEA,QAAIE,MAAM,CAACd,IAAX,EAAiB;AACjB,YAAM;AAAEI,QAAAA,WAAF;AAAeC,QAAAA,QAAf;AAAyBC,QAAAA;AAAzB,UAAiCQ,MAAM,CAACd,IAA9C;;AAEA,UAAI,CAACI,WAAD,IAAgB,CAACC,QAArB,EAA+B;AAC3B,cAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACH;;AAEDN,MAAAA,OAAO,CAAC;AACJO,QAAAA,EAAE,EAAEF,GADA;AAEJG,QAAAA,IAAI,EAAEL,WAFF;AAGJM,QAAAA,MAAM,EAAEL;AAHJ,OAAD,CAAP;AAKC;AACJ;;AAED,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEL,MAAAA,IAAF;AAAQW,MAAAA;AAAR,KAA7B;AAAA,cACKZ,KAAK,CAACiB;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAlDelB,mB;;KAAAA,mB","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from 'react';\n\nimport { auth, firebase } from '../services/firebase';\n\ntype User = {\n    id: string,\n    name: string,\n    avatar: string\n}\n  \ntype AuthContextType = {\n    user: User | undefined;\n    signInWithGoogle: () => Promise<void>;\n}\n\ntype AuthContextProviderProps = {\n    children: ReactNode;\n}\n\nexport const AuthContext = createContext({} as AuthContextType);\n\nexport function AuthContextProvider(props : AuthContextProviderProps) {\n    const [user, setUser] = useState<User>();\n\n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged(user => {\n        if (user) {\n            const { displayName, photoURL, uid } = user\n\n            if (!displayName || !photoURL) {\n            throw new Error('Missing information from Goolge Account.')\n            }\n    \n            setUser({\n            id: uid,\n            name: displayName,\n            avatar: photoURL\n            })\n        }\n        })\n\n        return () => {\n        unsubscribe();\n        }\n    }, []);\n\n    async function signInWithGoogle() {\n        const provider = new firebase.auth.GoogleAuthProvider();\n\n        const result = await auth.signInWithPopup(provider);\n\n        if (result.user) {\n        const { displayName, photoURL, uid } = result.user\n\n        if (!displayName || !photoURL) {\n            throw new Error('Missing information from Goolge Account.')\n        }\n\n        setUser({\n            id: uid,\n            name: displayName,\n            avatar: photoURL\n        })\n        }\n    }\n\n    return (\n        <AuthContext.Provider value={{ user, signInWithGoogle }}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n}"]},"metadata":{},"sourceType":"module"}